const express = require('express')
const router = express.Router()
const mongoose = require('mongoose')
require('../../models/fornecedor')
const Fornecedor = mongoose.model('fornec')
require('../../models/prod_lojista')
const Prodlojista = mongoose.model('prod_lojista')
require('../../models/prod_temp')
const ProdTemp = mongoose.model('prod_temp')
const csv=require('csvtojson')
require('../../models/segmentos')
const Segmento = mongoose.model('segmento')
const path =require('path')
const console = require('console')


//Ok { Falta concluir a entrada do primeiro produto}
router.post('/gravafornec',(req,res)=>{
    // Essa rotina vem da lista de fornecedores / admin central e cadastra o fornecedore Geral
    console.log('-------------------------------------------') 
    console.log('(32) --> post/fornec/fornecedores/gravafornec')
    console.log('vem de views/_cooperado/produto/cadastro-fornec')
    console.log(req.body)
    let r=req.body.raz3o;
   
    let a=req.body.cnj3;

    let m=req.body.marc3;

    let em=req.body.ema3l

    let segmento=req.body.inputSegmento;
    console.log('.....',segmento)
    let cep=req.body.inputCep;

    let numero =req.body.inputNumero;

    let cidade=req.body.inputCidade;

    let bairro=req.body.inputBairro;

    let estado =req.body.inputEstado;

    //let cod="6767";
    //let prod=req.body.prod3to
    new Fornecedor(
                    {
                    razao:`${r}`,     // razao
                    cnpj:`${a}`,      // cnpj
                    marca:`${m}`,     // marca 
                    email:`${em}`,    // email
                    segmento:`${segmento}`,
                    cep:`${cep}`,
                    numero:`${numero}`,
                    cidade:`${cidade}`,
                    bairro:`${bairro}`,
                    estado:`${estado}`,
                    //produtos:[{codigo:`${cod}`,descritivo:`${prod}`}]
                    }
            )
            .save()
            .then(()=>{
                res.redirect('/fornec/fornec')
               // res.send("Contato cadastrado com sucesso!")
            }).catch((err)=>{
              console.log(err)
              res.send(err)
            })
})

//Ok
router.get('/fornec',(req,res)=>{
  // Essa rotina vem do menu sidebar/admin central para gerar a lista de fornecedores
  console.log('-------------------------------------------') 
  console.log('(19) --> get/_admin/fornecedores/fornec')
  console.log('vem de Admin/central/menu-cadastro-fornecedores')
  // Essa rotina é de passagem do menu para a lista de fornecedores
  Segmento.find({},{segmento:1,_id:0})
          .then((seg)=>{
              console.log(seg)
              seg.sort()
              res.render("_admin/admin/main_cad-fornecedor", {layout:'participe.handlebars',segment:seg})
            })    
          .catch((err)=>{
               console.log(err)
          })    
})

// Ok falta mandar a resposta para front
router.get('/busca_cnpj/:id',(req,res)=>{
    // Faz uma busca para averiguação se o fabricante já consta no cadastro GERAL
    console.log('-----------------------------------------------')
    console.log('(72) --> post/_admin/fornecedores/busca_cnpj/:id')
    console.log('vem do views/(_admin/fornecedores)=[fornec]/list-produto-fornec')
    let fabricante=Object.values(req.params)
    console.log('valor do fabricante',fabricante)
    let letra=fabricante[0];
    let trocaletra=letra.replace("A",".")
    let result = trocaletra.replace("A", ".");
    result=result.replace("B","/");
    result=result.replace("C","-")
    let w={}
     Fornecedor.findOne({cnpj:result})
           .then((fornec)=>{
             console.log('valor do fornec',fornec)
             w=fornec;
             console.log('valor de w',w)
             if(!fornec  ||  undefined ){
                let s={vr:0};
                console.log(s)
                res.send(s)
             }else{
                let n=[{vr:1}];
                w=[
                  w=w,
                ]
                console.log(w)
                res.send(w)
             }
           })
           .catch((err)=>{
                  console.log(err)
           })
})

router.get('/adicionar-produto/:id',(req,res)=>{
  console.log('--------------------------------------')
  console.log('(linha 126 --> get/_admin/fornecedores/add-produto/:id')
  console.log('vem de views/_cooperdao/produto/cadastro-produt')
  console.log(req.params)
  let c=req.params;
  let [h]=Object.values(c)
//   console.log('vr de h',h)
  let position = h.search("<->");
  let fornec=h.slice(0,position)
  console.log(fornec)
  let p=position+3;
  let z=h.length;
  let x=(z -p);
  //::::::::::::::::::::::::::::::::
  let rz=h.slice(p,z)
  console.log(rz)
  Fornecedor.findOne({razao:h})
            .then((f)=>{
              console.log('vr de f',f)  
              if(f='null'){
                 fornec=fornec;
                 res.render('_admin/admin/main_cad-produtos',{ layout:'participe.handlebars',fornec:fornec,razao:rz})
              }else{
                     console.log('2',f)
                     res.render('_admin/admin/main_cad-produtos',{ layout:'participe.handlebars',fornec:f,razao:rz})
              }
            })
            .catch((e)=>{
              console.log(e)
            })
  
})

router.get('/import-produto/:id', async (req,res)=>{
    console.log('--------------------------------------')
    console.log('(linha 126&&&&& --> get/_admin/fornecedores/import-produto/:id')
    console.log('vem de views/_cooperdao/produto/cadastro-produt')
   // console.log('alo1',req.params)
    let q=Object.values(req.params);
   // console.log('vr de q',q[0])
    await  Fornecedor.findOne({marca:q})
              .then((f)=>{
               // console.log('valor de f',f)  
                // +++++++++++++++++++++++++++++++++++++++++
                    // ProdTemp.find({},{_id:0})
                    // .then((temp)=>{
                    //     const R=Object.values(temp);
                    //     console.log('linha 215',R.length)
                    //     //res.send(R)
                    // })
                    // .catch((e)=>{
                    //   console.log(e)
                    // })
                // :::::::::::::::::::::::::::::::::::::::::::::::::::
                console.log(88989)
                Prodlojista.findOne({'fornecedores.marcafornec':q})
                           .then((reg)=>{
                              if(Object.keys(reg).length=== 0){
                                console.log('vr de vazio')
                                res.render('_cooperado/produto/import-produto',{ layout:'participe.handlebars',fornec:f})
                              }else{
                                console.log('vr de reg')
                                res.render('_cooperado/produto/update-produto',{ layout:'participe.handlebars',fornec:f,chaves:reg})
                              }
                           })
                           .catch((e)=>{

                           })
              })
              .catch((e)=>{
                console.log(e)
              })
   
})

router.get('/gravaprodvisorio/:id',async (req,res)=>{
    console.log('--------------------------------')
    console.log('linha 170 ???   ---> post/_admin/fornecedores/gravaprodvisorio/:id')
    console.log("vem de view/_cooperados/produto/import-produto")
    //gravra o arquivo de transferencia em uma tabela provisória.
    let arquivo=req.params;
    console.log(arquivo)
    
    console.log(123456)
    // return
    let [arq]=Object.values(arquivo)
    console.log('vr do arquivo',arq)
    const fs=require('fs')
    const folderName='/Users/Rotaes/Estoquetransfer/txt';

   await ProdTemp.deleteMany({})
            .then((r)=>{
               console.log(123)
            })
            .catch((err)=>{
                console.log(err)
            })
      
      const folderPath=folderName;
      let dir=path.dirname(folderPath)
      console.log('diretorio => : ',dir)
      fs.readdirSync(dir)
      var m=fs.readFileSync(dir  + '/' + `${arq}`,'utf-8')
      // console.log('vr de m',m)
      let folder;
      folder="EstoqueTransferido"
      const b=m.replace( /,/g, '.');
      console.log('vr de b',b)
    // ATÉ AQUI ESTÁ CERTO
      // let d=Date.now().toString()
      // fs.writeFileSync('arquivos/' +  `${folder}` + '/' +  '-' + `${arq}`)
      // fs.writeFileSync(dir + '/' +  `${d}` +  '-' + `${arq}`, b)
      // console.log('Muito bem!')   
       
      await csv({
        noheader: true,
        headers: ['header1','header2']
      })
      //.fromFile(dir  + '/' +  `${folder}` + '/' + `${arq}`)
      .fromFile(dir  + '/' + `${arq}`)
      .then(csvData =>{
        let len=csvData.length;
     //   console.log('número de produtos a serem transferidos(239)',len)
        let codigo={};
        let descricao={}
        let r1=0;
        for(i=0;i<len;i++){
            if(i==0){
              console.log('publicando cabeçalho',csvData[i])
              //console.log('--------------------K---------------------------')
            }else{
              let campo=csvData[i];
              let [w]=Object.values(campo)
              let len=w.length;
              let n=w.search(";")
              let codigo=w.substr(0,n);
              //   console.log('------------------------------------------------------------')
              let palavra;
              palavra=w.slice((n+1),len);
              // console.log('--------------------------------------------------------------')
              let n1=palavra.search(";");
              descritivo=palavra.substr(0,n1);
              descritivo=descritivo.trim("");
                     
                    //  grava os registro na tabela temporária
                    // const docs = [
                    //   { codigo:`${codigo}, healthy: false },
                    //   { name: "lettuce", healthy: true },
                    //   { name: "donut", healthy: false }
                    // ];
                    console.log(`${codigo}`)
                    new ProdTemp({
                        codigo:`${codigo}`,
                        descritivo:`${descritivo}`,
                        })
                        .save()
                        .then((temp)=>{
                           
                            r1=r1++;

                            console.log(1000)

                            console.log("produto provisório ??",r1,'-------',temp);
                          //   }
                              // ProdTemp.find({},{_id:0})
                              // .then((temp)=>{
                              //     const R=Object.values(temp);
                              //     console.log('buscando os produtos que foram gravado em [prodTemp]=>vr R.lenght',R.length)
                                 
                              // })
                              // .catch((e)=>{
                              //   console.log(e)
                            })
                        .catch((err)=>{
                            console.log('vr de err',err)
                        })
                       
                        //res.send(temp)
                    // }
          }
          
        }
       
      // .catch((e)=>{
      //   console.log(e)
      })
      res.send(arquivo)  
});

  
   
     
 
    //  let q=(folder1 +  arq)
    //  console.log('vr de q',q)
    //  console.log('----------------------------------')
    //  var m=fs.readFileSync(q)
    //  console.log('vr de m',m)
    //  console.log('----------------------------------')
    //  console.log('***')
    // // const b=m.replace( /,/g, '.');
    //  console.log('****')
    //  let d=Date.now().toString()
    //  // Agora o arquivo recebe a data e milisegundo para ser gravado
    //  console.log('***&&&&&&&&&&&&&&&&&&')
    //  fs.writeFileSync('arquivos/' +  `${folder}` + '/' +  '-' + `${arq}`)
    // //  fs.writeFileSync('arquivos/' +  `${folder}` + '/' + `${d}` +  '-' + `${arq}`, b)
    // //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    // // O arquivo [CSV] é um arquivo de ponto e vírgula fornecido pelo EXCEL
    
        // //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        // Busca os registro que foram gravado na tabela temporaria
        



router.get('/busca_segfornec/:id',async(req,res)=>{
   // Essa rotina vem do cadastro de fornecedores.
   console.log('-------------------------------------------') 
   console.log('(297) --> get/_admin/fornecedores/fornec')
   console.log('vem de Admin/central/menu-cadastro-fornecedores')
   // Essa rotina é de passagem do menu para a lista de fornecedores
   let segment=req.params;
   console.log(segment)

   let [S]=Object.values(segment);
   console.log(S)
   await  Fornecedor.find({segmento:S})
                    .then((seg)=>{
                        console.log(seg)
                        res.send(seg)
                    })
                    .catch((err)=>{
                      console.log(err)
                    })
})

router.get('/importandoArquivo', async(req,res)=>{
     console.log('--------------------------------')
     console.log('linha 124    ---> post/_admin/fornecedores/importandoArquivo')
     console.log("vemde view/_cooperados/produto/impot-produto")
  
     var fs=require('fs')
     var m=fs.readFileSync('arquivos/wstaflex.txt','utf-8')
     const b=m.replace( /,/g, '.');
     console.log('---------------------------------------------------------------------------------')
     fs.writeFileSync('arquivos/' + 'westa.txt', b)

     csv({
           noheader: true,
           headers: ['header1','header2']
       })
       .fromFile("arquivos/westa.txt")
       .then(csvData =>{
           let len=csvData.length;
           let codigo={};
           let descricao={}
           for(i=0;i<len;i++){
                 if(i==0){
                   console.log(csvData[i])
                   console.log('-----------------------------------------------')
                 }else{
                   let campo=csvData[i];
                   let [w]=Object.values(campo)
                   console.log('valor de w :',w);
                   let len=w.length;
                   let n=w.search(";")
                   let codigo=w.substr(0,n);
                   console.log('vr do código :',codigo);
                   console.log('--------------------------------------------------------------')
                   let palavra;
                   palavra=w.slice((n+1),len);
                   // console.log('palavra: ',palavra)
                   console.log('--------------------------------------------------------------')
                   let n1=palavra.search(";");
                   descritivo=palavra.substr(0,n1);
                   descritivo=descritivo.trim("");
                   // console.log('código :',codigo ,' descrição :',descritivo)
                   console.log('--------------------------------------------------------------')
                   console.log('descrição do produto :',descritivo);
                   new Prodlojista({
                             codigo:codigo,
                             descritivo:descritivo,
                             })
                             .save()
                             .then(()=>{
                                 console.log("produto cadastrado com sucesso! ");
                             }).catch((err)=>{
                                 res.send(err)
                             })
                 }
           } 
        })
  })

// const H=Object.values(csvData)
// console.log(c);
// console.log(typeof(c))
// console.log(H);
//  Fornecedor.insertMany(csvData)
//            .then(function () {
//             console.log("Data inserted")
//             res.json({sucess:'sucess'});
//            })
    

module.exports = router;
